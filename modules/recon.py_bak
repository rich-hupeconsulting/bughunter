# modules/recon.py
import subprocess
import json
import os
from datetime import datetime

def run_command(command):
    try:
        result = subprocess.run(command, shell=True, capture_output=True, text=True, timeout=300)
        return result.stdout.strip()
    except Exception as e:
        return str(e)

def run_full_recon(domain):
    print(f"[+] Starting recon on {domain}")
    subdomains = []
    urls = []

    try:
        subfinder_out = run_command(f"subfinder -d {domain} -silent")
        subdomains = list(set(subfinder_out.splitlines()))

        amass_out = run_command(f"amass enum -d {domain} -norecursive -silent")
        subdomains += list(set(amass_out.splitlines()))

        subdomains = list(set(subdomains))  # remove duplicates

        if subdomains:
            with open("data/outputs/httpx_input.txt", "w") as f:
                for sub in subdomains:
                    f.write(f"{sub}\n")

            httpx_out = run_command("cat data/outputs/httpx_input.txt | httpx -silent")
            live_hosts = httpx_out.splitlines()
            urls += live_hosts

        gau_out = run_command(f"gau {domain}")
        urls += gau_out.splitlines()

        urls = list(set(urls))
    except Exception as e:
        print(f"[!] Recon error: {e}")

    return subdomains or [], urls or []

# Optional alias for backward compatibility
run_recon = run_full_recon
